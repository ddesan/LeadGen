'use strict';

exports.__esModule = true;
exports.closeModal = exports.openModal = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.Modal = Modal;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _usePortal = require('./hooks/usePortal');

var _usePortal2 = _interopRequireDefault(_usePortal);

var _useRnd = require('./hooks/useRnd');

var _useRnd2 = _interopRequireDefault(_useRnd);

var _useReactSpring = require('./hooks/useReactSpring');

var _useReactSpring2 = _interopRequireDefault(_useReactSpring);

var _closeSvg = require('./closeSvg');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var openModal = void 0,
    closeModal = void 0;

var initialData = {
  show: false,
  springState: false,
  component: null,
  closeOnClickOutside: true,
  closeComponent: null,
  componentProps: {},
  overlayClassName: '',
  withRnd: false,
  springStyle: '',
  config: {
    default: {
      width: 500,
      height: 300
    },
    className: '',
    minWidth: 300,
    minHeight: 'auto',
    lockAspectRatio: true,
    disableDragging: true,
    bounds: '.reuseModalParentWrapper',
    enableResizing: {
      bottom: false,
      bottomLeft: false,
      bottomRight: false,
      left: false,
      right: false,
      top: false,
      topLeft: false,
      topRight: false
    }
  }
};

function canUseDOM() {
  return !!(typeof window !== 'undefined' && window.document && window.document.createElement);
}

var ModalReducer = function ModalReducer(state) {
  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  return _extends({}, state, {
    show: action.show !== undefined ? action.show : !state.show,
    springState: action.springState !== undefined ? action.springState : !state.springState,
    withRnd: action.withRnd !== undefined ? action.withRnd : state.withRnd,
    springStyle: action.springStyle !== undefined ? action.springStyle : state.springStyle,
    overlayClassName: action.overlayClassName !== undefined ? action.overlayClassName : state.overlayClassName,
    component: action.component !== undefined ? action.component : null,
    componentProps: action.componentProps !== undefined ? action.componentProps : {},
    closeComponent: action.closeComponent !== undefined ? action.closeComponent : null,
    closeOnClickOutside: action.closeOnClickOutside !== undefined ? action.closeOnClickOutside : state.closeOnClickOutside,
    config: action.config !== undefined ? _extends({}, state.config, action.config) : state.config
  });
};

function Modal(_ref) {
  var children = _ref.children;

  var Portal = (0, _usePortal2.default)();

  var _useReducer = (0, _react.useReducer)(ModalReducer, initialData),
      state = _useReducer[0],
      dispatch = _useReducer[1];

  exports.openModal = openModal = dispatch;
  exports.closeModal = closeModal = dispatch;

  var show = state.show,
      component = state.component,
      closeComponent = state.closeComponent,
      overlayClassName = state.overlayClassName,
      withRnd = state.withRnd,
      springStyle = state.springStyle,
      springState = state.springState;

  var Rnd = (0, _useRnd2.default)({
    dispatch: dispatch,
    closeOnClickOutside: state.closeOnClickOutside
  });

  var ReactSpring = (0, _useReactSpring2.default)({
    dispatch: dispatch,
    closeOnClickOutside: state.closeOnClickOutside
  });
  var ModalComponent = component;
  var defaultCloseComponent = function defaultCloseComponent() {
    return _react2.default.createElement(
      'button',
      { className: 'reuseModalCloseBtn', onClick: function onClick() {
          return dispatch({});
        } },
      _react2.default.createElement(_closeSvg.CloseIcon, null)
    );
  };
  var Close = closeComponent ? closeComponent : defaultCloseComponent;

  return _react2.default.createElement(
    _react.Fragment,
    null,
    show && _react2.default.createElement(
      _react.Fragment,
      null,
      !canUseDOM ? _react2.default.createElement(
        Portal,
        null,
        _react2.default.createElement('div', { className: 'reuseModalOverlay ' + overlayClassName }),
        _react2.default.createElement(Close, null),
        _react2.default.createElement(
          'div',
          { className: 'reuseModalParrentWrapper' },
          _react2.default.createElement(
            Rnd,
            { config: state.config },
            _react2.default.createElement(ModalComponent, state.componentProps)
          )
        )
      ) : withRnd ? _react2.default.createElement(
        _react.Fragment,
        null,
        _react2.default.createElement('div', { className: 'reuseModalOverlay ' + overlayClassName }),
        _react2.default.createElement(Close, null),
        _react2.default.createElement(
          'div',
          { className: 'reuseModalParentWrapper' },
          _react2.default.createElement(
            Rnd,
            { config: state.config },
            _react2.default.createElement(ModalComponent, state.componentProps)
          )
        )
      ) : _react2.default.createElement(
        _react.Fragment,
        null,
        _react2.default.createElement('div', { className: 'reuseModalOverlay ' + overlayClassName }),
        _react2.default.createElement(Close, null),
        _react2.default.createElement(
          'div',
          { className: 'reuseModalParentWrapper' },
          _react2.default.createElement(
            ReactSpring,
            {
              configs: state.config,
              springState: springState,
              style: springStyle
            },
            _react2.default.createElement(ModalComponent, state.componentProps)
          )
        )
      )
    ),
    children
  );
}

exports.openModal = openModal;
exports.closeModal = closeModal;